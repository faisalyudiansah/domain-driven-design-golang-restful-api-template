// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "server/internal/auth/dto"

	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenUseCase is an autogenerated mock type for the RefreshTokenUseCase type
type RefreshTokenUseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, request
func (_m *RefreshTokenUseCase) Delete(ctx context.Context, request *dto.DeleteRefreshTokenRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteRefreshTokenRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, request
func (_m *RefreshTokenUseCase) Get(ctx context.Context, request *dto.GetRefreshTokenRequest) (*dto.RefreshTokenResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRefreshTokenRequest) (*dto.RefreshTokenResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetRefreshTokenRequest) *dto.RefreshTokenResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetRefreshTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, request
func (_m *RefreshTokenUseCase) Save(ctx context.Context, request *dto.CreateRefreshTokenRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateRefreshTokenRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRefreshTokenUseCase creates a new instance of RefreshTokenUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenUseCase {
	mock := &RefreshTokenUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
