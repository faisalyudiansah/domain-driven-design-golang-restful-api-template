// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "server/internal/auth/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: ctx, user
func (_m *UserUseCase) ForgotPassword(ctx context.Context, user *dto.RequestUserForgotPassword) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserForgotPassword) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, user
func (_m *UserUseCase) Login(ctx context.Context, user *dto.RequestUserLogin) (*dto.ResponseLogin, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.ResponseLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserLogin) (*dto.ResponseLogin, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserLogin) *dto.ResponseLogin); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseLogin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RequestUserLogin) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserUseCase) Register(ctx context.Context, user *dto.RequestUserRegister) (*dto.ResponseRegister, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *dto.ResponseRegister
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserRegister) (*dto.ResponseRegister, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserRegister) *dto.ResponseRegister); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseRegister)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RequestUserRegister) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, user
func (_m *UserUseCase) ResetPassword(ctx context.Context, user *dto.RequestUserResetPassword) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserResetPassword) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerification provides a mock function with given fields: ctx, user
func (_m *UserUseCase) SendVerification(ctx context.Context, user *dto.RequestUserSendVerification) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SendVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserSendVerification) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyAccount provides a mock function with given fields: ctx, user
func (_m *UserUseCase) VerifyAccount(ctx context.Context, user *dto.RequestUserVerifyAccount) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestUserVerifyAccount) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
