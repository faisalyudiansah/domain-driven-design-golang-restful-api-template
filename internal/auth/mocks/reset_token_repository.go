// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "server/internal/auth/entity"

	mock "github.com/stretchr/testify/mock"
)

// ResetTokenRepository is an autogenerated mock type for the ResetTokenRepository type
type ResetTokenRepository struct {
	mock.Mock
}

// DeleteByUserID provides a mock function with given fields: ctx, userID
func (_m *ResetTokenRepository) DeleteByUserID(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByResetToken provides a mock function with given fields: ctx, token
func (_m *ResetTokenRepository) FindByResetToken(ctx context.Context, token string) (*entity.ResetToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByResetToken")
	}

	var r0 *entity.ResetToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ResetToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ResetToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ResetToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, resetToken
func (_m *ResetTokenRepository) Save(ctx context.Context, resetToken *entity.ResetToken) error {
	ret := _m.Called(ctx, resetToken)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ResetToken) error); ok {
		r0 = rf(ctx, resetToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResetTokenRepository creates a new instance of ResetTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResetTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResetTokenRepository {
	mock := &ResetTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
